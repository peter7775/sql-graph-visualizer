/*
 * Copyright (c) 2025 Petr Miroslav Stepanek <petrstepanek99@gmail.com>
 *
 * This source code is licensed under a Dual License:
 * - AGPL-3.0 for open source use (see LICENSE file)
 * - Commercial License for business use (contact: petrstepanek99@gmail.com)
 *
 * This software contains patent-pending innovations in database analysis
 * and graph visualization. Commercial use requires separate licensing.
 */

package models

// DatabaseType represents the type of database engine
type DatabaseType string

const (
	DatabaseTypeMySQL      DatabaseType = "mysql"
	DatabaseTypePostgreSQL DatabaseType = "postgresql"
)

// DatabaseConfig represents generic database configuration interface
type DatabaseConfig interface {
	GetDatabaseType() DatabaseType
	GetHost() string
	GetPort() int
	GetUsername() string
	GetPassword() string
	GetDatabase() string
	GetConnectionMode() ConnectionMode
	GetDataFiltering() DataFilteringConfig
	GetSecurity() SecurityConfig
	GetSSLConfig() SSLConfig
	GetAutoGeneratedRules() AutoGeneratedRulesConfig
	Validate() error
}

// PostgreSQLConfig represents PostgreSQL database connection configuration
type PostgreSQLConfig struct {
	Host               string                   `yaml:"host"`
	Port               int                      `yaml:"port"`
	User               string                   `yaml:"user"`
	Username           string                   `yaml:"username,omitempty"` // alias for User
	Password           string                   `yaml:"password"`
	Database           string                   `yaml:"database"`
	Schema             string                   `yaml:"schema,omitempty"` // PostgreSQL-specific schema
	ConnectionMode     ConnectionMode           `yaml:"connection_mode,omitempty"`
	DataFiltering      DataFilteringConfig      `yaml:"data_filtering,omitempty"`
	Security           SecurityConfig           `yaml:"security,omitempty"`
	SSLConfig          PostgreSQLSSLConfig      `yaml:"ssl,omitempty"`
	AutoGeneratedRules AutoGeneratedRulesConfig `yaml:"auto_generated_rules,omitempty"`

	// PostgreSQL-specific settings
	SearchPath       []string `yaml:"search_path,omitempty"`       // Schema search path
	ApplicationName  string   `yaml:"application_name,omitempty"`  // Connection application name
	StatementTimeout int      `yaml:"statement_timeout,omitempty"` // Statement timeout in seconds
}

// PostgreSQLSSLConfig represents PostgreSQL-specific SSL configuration
type PostgreSQLSSLConfig struct {
	Mode               string `yaml:"mode"` // disable, allow, prefer, require, verify-ca, verify-full
	CertFile           string `yaml:"cert_file,omitempty"`
	KeyFile            string `yaml:"key_file,omitempty"`
	CAFile             string `yaml:"ca_file,omitempty"`
	CRLFile            string `yaml:"crl_file,omitempty"`
	ServerName         string `yaml:"server_name,omitempty"` // For SNI
	InsecureSkipVerify bool   `yaml:"insecure_skip_verify,omitempty"`
}

// DatabaseType methods for MySQLConfig
func (c *MySQLConfig) GetDatabaseType() DatabaseType {
	return DatabaseTypeMySQL
}

func (c *MySQLConfig) GetHost() string {
	return c.Host
}

func (c *MySQLConfig) GetPort() int {
	return c.Port
}

func (c *MySQLConfig) GetUsername() string {
	if c.Username != "" {
		return c.Username
	}
	return c.User
}

func (c *MySQLConfig) GetPassword() string {
	return c.Password
}

func (c *MySQLConfig) GetDatabase() string {
	return c.Database
}

func (c *MySQLConfig) GetConnectionMode() ConnectionMode {
	return c.ConnectionMode
}

func (c *MySQLConfig) GetDataFiltering() DataFilteringConfig {
	return c.DataFiltering
}

func (c *MySQLConfig) GetSecurity() SecurityConfig {
	return c.Security
}

func (c *MySQLConfig) GetSSLConfig() SSLConfig {
	return c.SSLConfig
}

func (c *MySQLConfig) GetAutoGeneratedRules() AutoGeneratedRulesConfig {
	return c.AutoGeneratedRules
}

func (c *MySQLConfig) Validate() error {
	if c.Host == "" {
		return NewValidationError("mysql.host", "Host is required")
	}
	if c.GetUsername() == "" {
		return NewValidationError("mysql.user", "Username is required")
	}
	if c.Database == "" {
		return NewValidationError("mysql.database", "Database name is required")
	}
	if c.Port <= 0 || c.Port > 65535 {
		return NewValidationError("mysql.port", "Port must be between 1 and 65535")
	}
	return nil
}

// DatabaseType methods for PostgreSQLConfig
func (c *PostgreSQLConfig) GetDatabaseType() DatabaseType {
	return DatabaseTypePostgreSQL
}

func (c *PostgreSQLConfig) GetHost() string {
	return c.Host
}

func (c *PostgreSQLConfig) GetPort() int {
	return c.Port
}

func (c *PostgreSQLConfig) GetUsername() string {
	if c.Username != "" {
		return c.Username
	}
	return c.User
}

func (c *PostgreSQLConfig) GetPassword() string {
	return c.Password
}

func (c *PostgreSQLConfig) GetDatabase() string {
	return c.Database
}

func (c *PostgreSQLConfig) GetConnectionMode() ConnectionMode {
	return c.ConnectionMode
}

func (c *PostgreSQLConfig) GetDataFiltering() DataFilteringConfig {
	return c.DataFiltering
}

func (c *PostgreSQLConfig) GetSecurity() SecurityConfig {
	return c.Security
}

func (c *PostgreSQLConfig) GetSSLConfig() SSLConfig {
	// Convert PostgreSQL SSL config to generic SSL config
	return SSLConfig{
		Enabled:            c.SSLConfig.Mode != "disable",
		CertFile:           c.SSLConfig.CertFile,
		KeyFile:            c.SSLConfig.KeyFile,
		CAFile:             c.SSLConfig.CAFile,
		InsecureSkipVerify: c.SSLConfig.InsecureSkipVerify,
	}
}

func (c *PostgreSQLConfig) GetAutoGeneratedRules() AutoGeneratedRulesConfig {
	return c.AutoGeneratedRules
}

func (c *PostgreSQLConfig) Validate() error {
	if c.Host == "" {
		return NewValidationError("postgresql.host", "Host is required")
	}
	if c.GetUsername() == "" {
		return NewValidationError("postgresql.user", "Username is required")
	}
	if c.Database == "" {
		return NewValidationError("postgresql.database", "Database name is required")
	}
	if c.Port <= 0 || c.Port > 65535 {
		return NewValidationError("postgresql.port", "Port must be between 1 and 65535")
	}

	// Validate SSL mode
	validSSLModes := []string{"disable", "allow", "prefer", "require", "verify-ca", "verify-full"}
	if c.SSLConfig.Mode != "" {
		valid := false
		for _, mode := range validSSLModes {
			if c.SSLConfig.Mode == mode {
				valid = true
				break
			}
		}
		if !valid {
			return NewValidationError("postgresql.ssl.mode", "Invalid SSL mode")
		}
	}

	return nil
}

// NewValidationError creates a new validation error
func NewValidationError(field, message string) *ValidationError {
	return &ValidationError{
		Type:    "VALIDATION",
		Message: field + ": " + message,
	}
}

// DatabaseSelector represents configuration for choosing database type
type DatabaseSelector struct {
	Type       DatabaseType      `yaml:"type"` // "mysql" or "postgresql"
	MySQL      *MySQLConfig      `yaml:"mysql,omitempty"`
	PostgreSQL *PostgreSQLConfig `yaml:"postgresql,omitempty"`
}

func (ds *DatabaseSelector) GetActiveConfig() DatabaseConfig {
	switch ds.Type {
	case DatabaseTypeMySQL:
		if ds.MySQL != nil {
			return ds.MySQL
		}
	case DatabaseTypePostgreSQL:
		if ds.PostgreSQL != nil {
			return ds.PostgreSQL
		}
	}
	return nil
}

func (ds *DatabaseSelector) Validate() error {
	if ds.Type == "" {
		return NewValidationError("database.type", "Database type must be specified")
	}

	config := ds.GetActiveConfig()
	if config == nil {
		return NewValidationError("database", "No configuration found for database type: "+string(ds.Type))
	}

	return config.Validate()
}
