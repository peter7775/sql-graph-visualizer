/*
 * Copyright (c) 2025 Petr Miroslav Stepanek <petrstepanek99@gmail.com>
 *
 * This source code is licensed under a Dual License:
 * - AGPL-3.0 for open source use (see LICENSE file)
 * - Commercial License for business use (contact: petrstepanek99@gmail.com)
 *
 * This software contains patent-pending innovations in database analysis
 * and graph visualization. Commercial use requires separate licensing.
 */


package models

// TransformationConfig represents a single transformation rule configuration.
type TransformationConfig struct {
	Name          string            `yaml:"name"`
	Source        SourceConfig      `yaml:"source"`
	Nodes         []NodeConfig      `yaml:"nodes"`
	Relations     []RelationConfig  `yaml:"relations"`
	FieldMappings map[string]string `yaml:"field_mappings"`
	SourceNode    RelationNode      `yaml:"source_node"`
	TargetNode    RelationNode      `yaml:"target_node"`
	RelationType  string            `yaml:"relationship_type,omitempty"`
	TargetType    string            `yaml:"target_type,omitempty"`
	RuleType      string            `yaml:"rule_type,omitempty"`
	Direction     string            `yaml:"direction,omitempty"`
	Properties    map[string]string `yaml:"properties,omitempty"`
	Priority      int               `yaml:"priority,omitempty"`
}

// NodeConfig represents node configuration for transformation rules.
type NodeConfig struct {
	Label      string            `yaml:"label"`
	Properties []PropertyMapping `yaml:"properties"`
}

// PropertyMapping represents mapping between source and target properties.
type PropertyMapping struct {
	Source string `yaml:"source"`
	Target string `yaml:"target"`
}

// RelationConfig represents relationship configuration between nodes.
type RelationConfig struct {
	Type string       `yaml:"type"`
	From RelationNode `yaml:"from"`
	To   RelationNode `yaml:"to"`
}

// RelationNode represents a node in a relationship configuration.
type RelationNode struct {
	Type        string `yaml:"type"`
	Key         string `yaml:"key"`
	TargetField string `yaml:"target_field"`
}

// SourceConfig represents data source configuration for transformations.
type SourceConfig struct {
	Type        string `yaml:"type"`
	Value       string `yaml:"value"`
	SourceTable string `yaml:"source_table"`
}

// ConnectionMode represents different database connection modes
type ConnectionMode string

const (
	ConnectionModeExisting ConnectionMode = "existing"
	ConnectionModeTestData ConnectionMode = "test_data"
	ConnectionModeSQLFile  ConnectionMode = "sql_file"
)

// DataFilteringConfig represents options for filtering and limiting data
type DataFilteringConfig struct {
	SchemaDiscovery   bool              `yaml:"schema_discovery"`
	TableWhitelist    []string          `yaml:"table_whitelist,omitempty"`
	TableBlacklist    []string          `yaml:"table_blacklist,omitempty"`
	RowLimitPerTable  int               `yaml:"row_limit_per_table,omitempty"`
	WhereConditions   map[string]string `yaml:"where_conditions,omitempty"`
	QueryTimeout      int               `yaml:"query_timeout,omitempty"` // seconds
}

// SecurityConfig represents security settings for database connections
type SecurityConfig struct {
	ReadOnly                   bool     `yaml:"read_only"`
	ConnectionTimeout          int      `yaml:"connection_timeout"` // seconds
	QueryTimeout               int      `yaml:"query_timeout"`      // seconds
	MaxConnections             int      `yaml:"max_connections"`
	AllowProductionConnections bool     `yaml:"allow_production_connections,omitempty"`
	AllowRootUser              bool     `yaml:"allow_root_user,omitempty"`
	AllowedHosts               []string `yaml:"allowed_hosts,omitempty"`
	ForbiddenPatterns          []string `yaml:"forbidden_patterns,omitempty"`
}

// SSLConfig represents SSL/TLS configuration for database connections
type SSLConfig struct {
	Enabled              bool   `yaml:"enabled"`
	CertFile             string `yaml:"cert_file,omitempty"`
	KeyFile              string `yaml:"key_file,omitempty"`
	CAFile               string `yaml:"ca_file,omitempty"`
	InsecureSkipVerify   bool   `yaml:"insecure_skip_verify,omitempty"`
}

// MySQLConfig represents MySQL database connection configuration.
type MySQLConfig struct {
	Host                string                     `yaml:"host"`
	Port                int                        `yaml:"port"`
	User                string                     `yaml:"user"`
	Username            string                     `yaml:"username,omitempty"` // alias for User
	Password            string                     `yaml:"password"`
	Database            string                     `yaml:"database"`
	ConnectionMode      ConnectionMode             `yaml:"connection_mode,omitempty"`
	DataFiltering       DataFilteringConfig        `yaml:"data_filtering,omitempty"`
	Security            SecurityConfig             `yaml:"security,omitempty"`
	SSLConfig           SSLConfig                  `yaml:"ssl,omitempty"`
	AutoGeneratedRules  AutoGeneratedRulesConfig   `yaml:"auto_generated_rules,omitempty"`
}

// BatchProcessingConfig represents settings for working with large datasets
type BatchProcessingConfig struct {
	BatchSize       int `yaml:"batch_size"`
	CommitFrequency int `yaml:"commit_frequency"`
	MemoryLimitMB   int `yaml:"memory_limit_mb"`
}

// Neo4jConfig represents Neo4j database connection configuration.
type Neo4jConfig struct {
	URI              string                  `yaml:"uri"`
	User             string                  `yaml:"user"`
	Password         string                  `yaml:"password"`
	BatchProcessing  *BatchProcessingConfig  `yaml:"batch_processing,omitempty"`
}

// NamingConvention represents naming convention settings for automatic rule generation
type NamingConvention struct {
	NodeTypeFormat     string `yaml:"node_type_format"`     // "Pascal", "snake_case", etc.
	RelationTypeFormat string `yaml:"relation_type_format"` // "UPPER_SNAKE", "PascalCase", etc.
}

// RuleGenerationStrategy represents strategy for creating automatic transformation rules
type RuleGenerationStrategy struct {
	TableToNode           bool               `yaml:"table_to_node"`
	ForeignKeysToRelations bool              `yaml:"foreign_keys_to_relations"`
	NamingConvention      *NamingConvention  `yaml:"naming_convention,omitempty"`
}

// TableOverride represents override settings for specific tables in rule generation
type TableOverride struct {
	MergeWith        string `yaml:"merge_with,omitempty"`
	RelationshipType string `yaml:"relationship_type,omitempty"`
	Skip             bool   `yaml:"skip,omitempty"`
}

// AutoGeneratedRulesConfig represents configuration for automatic rule generation
type AutoGeneratedRulesConfig struct {
	Enabled        bool                           `yaml:"enabled"`
	Strategy       *RuleGenerationStrategy        `yaml:"strategy,omitempty"`
	TableOverrides map[string]*TableOverride     `yaml:"table_overrides,omitempty"`
}

// SchemaAnalysisConfig represents configuration for schema analysis
type SchemaAnalysisConfig struct {
	GenerateRules          bool               `yaml:"generate_rules"`
	TableToNode            bool               `yaml:"table_to_node"`
	ForeignKeysToRelations bool               `yaml:"foreign_keys_to_relations"`
	NamingConvention       *NamingConvention  `yaml:"naming_convention,omitempty"`
}

// Config represents the main application configuration.
type Config struct {
	// Legacy single-database support
	MySQL              MySQLConfig                `yaml:"mysql,omitempty"`
	Neo4j              Neo4jConfig                `yaml:"neo4j"`
	
	// Multi-database support (Issue #7)
	Database           *DatabaseSelector          `yaml:"database,omitempty"`
	
	// Performance monitoring and benchmarking (Issue #12)
	Performance        *PerformanceConfig         `yaml:"performance,omitempty"`
	
	TransformRules     []TransformationConfig     `yaml:"transform_rules"`
	AutoGeneratedRules *AutoGeneratedRulesConfig  `yaml:"auto_generated_rules,omitempty"`
}

// GetDatabaseConfig returns the active database configuration
func (c *Config) GetDatabaseConfig() DatabaseConfig {
	// If new multi-database config is set, use it
	if c.Database != nil {
		return c.Database.GetActiveConfig()
	}
	
	// Fall back to legacy MySQL config for backward compatibility
	return &c.MySQL
}

// GetDatabaseType returns the active database type
func (c *Config) GetDatabaseType() DatabaseType {
	// If new multi-database config is set, use it
	if c.Database != nil {
		return c.Database.Type
	}
	
	// Fall back to MySQL for backward compatibility
	return DatabaseTypeMySQL
}

// Performance configuration structures (Issue #12)

// PerformanceConfig represents the main performance monitoring configuration
type PerformanceConfig struct {
	Monitoring    *MonitoringConfig    `yaml:"monitoring,omitempty"`
	Realtime      *RealtimeConfig      `yaml:"realtime,omitempty"`
	Benchmarks    *BenchmarksConfig    `yaml:"benchmarks,omitempty"`
	Visualization *VisualizationConfig `yaml:"visualization,omitempty"`
}

// MonitoringConfig contains performance monitoring settings
type MonitoringConfig struct {
	Enabled               bool                      `yaml:"enabled"`
	UpdateInterval        string                    `yaml:"update_interval"`
	DataRetention         string                    `yaml:"data_retention"`
	MaxConcurrentQueries  int                       `yaml:"max_concurrent_queries"`
	PerformanceSchema     *PerformanceSchemaConfig  `yaml:"performance_schema,omitempty"`
	Analysis              *AnalysisConfig           `yaml:"analysis,omitempty"`
}

// PerformanceSchemaConfig contains MySQL Performance Schema settings
type PerformanceSchemaConfig struct {
	Enabled         bool   `yaml:"enabled"`
	StatementLimit  int    `yaml:"statement_limit"`
	TableIOLimit    int    `yaml:"table_io_limit"`
	IndexLimit      int    `yaml:"index_limit"`
	ConnectionLimit int    `yaml:"connection_limit"`
	CacheDuration   string `yaml:"cache_duration"`
}

// AnalysisConfig contains performance analysis settings
type AnalysisConfig struct {
	BottleneckThreshold   float64 `yaml:"bottleneck_threshold"`
	SlowQueryThreshold    float64 `yaml:"slow_query_threshold"`
	HighLoadThreshold     float64 `yaml:"high_load_threshold"`
	HotspotThreshold      float64 `yaml:"hotspot_threshold"`
}

// RealtimeConfig contains real-time monitoring settings
type RealtimeConfig struct {
	Enabled               bool         `yaml:"enabled"`
	UpdateInterval        string       `yaml:"update_interval"`
	HeartbeatInterval     string       `yaml:"heartbeat_interval"`
	MaxConnections        int          `yaml:"max_connections"`
	WriteTimeout          string       `yaml:"write_timeout"`
	ReadTimeout           string       `yaml:"read_timeout"`
	PingTimeout           string       `yaml:"ping_timeout"`
	MaxMessageSize        int64        `yaml:"max_message_size"`
	CompressionEnabled    bool         `yaml:"compression_enabled"`
	Alerts                *AlertConfig `yaml:"alerts,omitempty"`
}

// AlertConfig contains alert threshold settings
type AlertConfig struct {
	HighLatency          float64 `yaml:"high_latency"`
	HighErrorRate        float64 `yaml:"high_error_rate"`
	HighCPUUsage         float64 `yaml:"high_cpu_usage"`
	HighMemoryUsage      float64 `yaml:"high_memory_usage"`
	SlowQueryThreshold   float64 `yaml:"slow_query_threshold"`
	DeadlockThreshold    int     `yaml:"deadlock_threshold"`
}

// BenchmarksConfig contains benchmarking settings
type BenchmarksConfig struct {
	Enabled           bool            `yaml:"enabled"`
	DefaultDuration   string          `yaml:"default_duration"`
	MaxDuration       string          `yaml:"max_duration"`
	ResultsRetention  string          `yaml:"results_retention"`
	Sysbench          *SysbenchConfig `yaml:"sysbench,omitempty"`
	Limits            *LimitsConfig   `yaml:"limits,omitempty"`
}

// SysbenchConfig contains Sysbench-specific settings
type SysbenchConfig struct {
	ExecutablePath    string             `yaml:"executable_path"`
	TempDir           string             `yaml:"temp_dir"`
	CleanupAfterTest  bool               `yaml:"cleanup_after_test"`
	Defaults          *SysbenchDefaults  `yaml:"defaults,omitempty"`
}

// SysbenchDefaults contains default Sysbench parameters
type SysbenchDefaults struct {
	TableSize      int `yaml:"table_size"`
	Threads        int `yaml:"threads"`
	Time           int `yaml:"time"`
	ReportInterval int `yaml:"report_interval"`
}

// LimitsConfig contains resource limit settings
type LimitsConfig struct {
	MaxConcurrentBenchmarks int     `yaml:"max_concurrent_benchmarks"`
	MemoryLimitMB           int     `yaml:"memory_limit_mb"`
	CPUThreshold            float64 `yaml:"cpu_threshold"`
}

// VisualizationConfig contains graph visualization settings
type VisualizationConfig struct {
	EdgeThickness         *EdgeThicknessConfig `yaml:"edge_thickness,omitempty"`
	EdgeColor             *EdgeColorConfig     `yaml:"edge_color,omitempty"`
	NodeSize              *NodeSizeConfig      `yaml:"node_size,omitempty"`
	NodeColor             *NodeColorConfig     `yaml:"node_color,omitempty"`
	Animation             *AnimationConfig     `yaml:"animation,omitempty"`
	UpdateInterval        string               `yaml:"update_interval"`
	HistoryRetention      string               `yaml:"history_retention"`
	MaxConcurrentUpdates  int                  `yaml:"max_concurrent_updates"`
}

// EdgeThicknessConfig controls edge thickness visualization
type EdgeThicknessConfig struct {
	Metric       string  `yaml:"metric"`
	Scale        string  `yaml:"scale"`
	MinThickness float64 `yaml:"min_thickness"`
	MaxThickness float64 `yaml:"max_thickness"`
	Multiplier   float64 `yaml:"multiplier"`
}

// EdgeColorConfig controls edge color visualization
type EdgeColorConfig struct {
	Metric     string                 `yaml:"metric"`
	ColorScale string                 `yaml:"color_scale"`
	Thresholds map[string]interface{} `yaml:"thresholds"`
}

// NodeSizeConfig controls node size visualization
type NodeSizeConfig struct {
	Metric  string  `yaml:"metric"`
	MinSize float64 `yaml:"min_size"`
	MaxSize float64 `yaml:"max_size"`
	Scale   string  `yaml:"scale"`
}

// NodeColorConfig controls node color visualization
type NodeColorConfig struct {
	Metric     string                 `yaml:"metric"`
	ColorScale string                 `yaml:"color_scale"`
	Thresholds map[string]interface{} `yaml:"thresholds"`
}

// AnimationConfig controls animation settings
type AnimationConfig struct {
	ShowDataFlow    bool    `yaml:"show_data_flow"`
	SpeedBasedOn    string  `yaml:"speed_based_on"`
	AnimationSpeed  float64 `yaml:"animation_speed"`
	ParticleCount   int     `yaml:"particle_count"`
}
