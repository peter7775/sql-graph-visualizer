/*
 * Copyright (c) 2025 Petr Miroslav Stepanek <petrstepanek99@gmail.com>
 *
 * This source code is licensed under a Dual License:
 * - AGPL-3.0 for open source use (see LICENSE file)
 * - Commercial License for business use (contact: petrstepanek99@gmail.com)
 *
 * This software contains patent-pending innovations in database analysis
 * and graph visualization. Commercial use requires separate licensing.
 */

package ports

import (
	"context"
	"database/sql"
	"sql-graph-visualizer/internal/domain/models"
)

// DatabaseAnalyzerPort defines the interface for database analysis operations
type DatabaseAnalyzerPort interface {
	ValidateConnection(ctx context.Context, db *sql.DB, config *models.SecurityConfig) (*models.ConnectionValidationResult, error)

	DiscoverSchema(ctx context.Context, db *sql.DB, config *models.DataFilteringConfig) (*models.SchemaAnalysisResult, error)

	GetTables(ctx context.Context, db *sql.DB, filters *models.DataFilteringConfig) ([]string, error)
	GetTableInfo(ctx context.Context, db *sql.DB, tableName string) (*models.TableInfo, error)
	GetTableColumns(ctx context.Context, db *sql.DB, tableName string) ([]models.ColumnInfo, error)
	GetTableIndexes(ctx context.Context, db *sql.DB, tableName string) ([]models.IndexInfo, error)
	GetTableForeignKeys(ctx context.Context, db *sql.DB, tableName string) ([]models.ForeignKeyInfo, error)

	DiscoverRelationships(ctx context.Context, db *sql.DB, schema *models.DatabaseSchema) ([]models.RelationshipInfo, error)
	DiscoverImplicitRelationships(ctx context.Context, schema *models.DatabaseSchema) ([]models.RelationshipInfo, error)

	EstimateDataSize(ctx context.Context, db *sql.DB, config *models.DataFilteringConfig) (*models.DatasetInfo, error)
	ValidateDataAccess(ctx context.Context, db *sql.DB, tables []string, config *models.SecurityConfig) ([]models.ValidationError, error)

	GenerateOptimalQueries(ctx context.Context, schema *models.DatabaseSchema, config *models.DataFilteringConfig) (map[string]string, error)
}

// ExistingDatabasePort defines the interface for working with existing databases
type ExistingDatabasePort interface {
	Connect(ctx context.Context, config *models.MySQLConfig) (*sql.DB, error)
	ValidateConnection(ctx context.Context, db *sql.DB) error
	DiscoverAndAnalyze(ctx context.Context, db *sql.DB, config *models.MySQLConfig) (*models.SchemaAnalysisResult, error)

	ExtractData(ctx context.Context, db *sql.DB, schema *models.DatabaseSchema, config *models.DataFilteringConfig) (map[string][]map[string]any, error)
	ExtractTableData(ctx context.Context, db *sql.DB, tableName string, config *models.DataFilteringConfig) ([]map[string]any, error)

	GenerateTransformationRules(ctx context.Context, schema *models.DatabaseSchema, config *models.AutoGeneratedRulesConfig) ([]models.TransformationConfig, error)

	Close(ctx context.Context, db *sql.DB) error
}

// SecurityValidatorPort defines the interface for database security validation
type SecurityValidatorPort interface {
	ValidateReadOnlyPermissions(ctx context.Context, db *sql.DB) error
	ValidateTableAccess(ctx context.Context, db *sql.DB, tables []string) error

	SanitizeWhereConditions(conditions map[string]string) (map[string]string, error)
	ValidateQueryComplexity(query string) error
	ValidateQuerySafety(query string) error

	ValidateConnectionSecurity(ctx context.Context, db *sql.DB, config *models.SecurityConfig) error
	CheckDatabasePermissions(ctx context.Context, db *sql.DB) ([]string, error)
}
