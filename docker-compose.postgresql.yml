# Docker Compose for SQL Graph Visualizer with PostgreSQL
# This setup includes PostgreSQL with Chinook sample database + Neo4j

version: '3.8'

services:
  # PostgreSQL database with Chinook sample data
  postgresql:
    image: postgres:15-alpine
    container_name: sql-graph-visualizer-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: chinook
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgresql/init:/docker-entrypoint-initdb.d:ro
      - ./docker/postgresql/conf:/etc/postgresql:ro
    networks:
      - sql-graph-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chinook"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Neo4j graph database (commented out - using existing container)
  # neo4j:
  #   image: neo4j:5.15-community
  #   container_name: sql-graph-visualizer-neo4j
  #   restart: unless-stopped
  #   environment:
  #     NEO4J_AUTH: neo4j/password
  #     NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
  #     NEO4J_dbms_connector_https_advertised__address: localhost:7473
  #     NEO4J_dbms_connector_http_advertised__address: localhost:7474
  #     NEO4J_dbms_connector_bolt_advertised__address: localhost:7687
  #     NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
  #     NEO4J_dbms_security_procedures_allowlist: apoc.*,gds.*
  #     NEO4J_apoc_export_file_enabled: true
  #     NEO4J_apoc_import_file_enabled: true
  #     NEO4J_apoc_import_file_use__neo4j__config: true
  #     # Memory settings
  #     NEO4J_dbms_memory_heap_initial__size: 512m
  #     NEO4J_dbms_memory_heap_max__size: 1G
  #     NEO4J_dbms_memory_pagecache_size: 512m
  #   ports:
  #     - "7474:7474"   # HTTP
  #     - "7473:7473"   # HTTPS
  #     - "7687:7687"   # Bolt
  #   volumes:
  #     - neo4j_data:/data
  #     - neo4j_logs:/logs
  #     - neo4j_import:/var/lib/neo4j/import
  #     - neo4j_plugins:/plugins
  #   networks:
  #     - sql-graph-network
  #   healthcheck:
  #     test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # pgAdmin for PostgreSQL management (optional)
  pgadmin:
    image: dpage/pgadmin4:8.0
    container_name: sql-graph-visualizer-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@sqlgraph.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json:ro
    networks:
      - sql-graph-network
    depends_on:
      postgresql:
        condition: service_healthy
    profiles:
      - admin  # Only start with --profile admin

  # Optional: PostgreSQL .monitoring with pg_stat_statements
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.12.0
    container_name: sql-graph-visualizer-postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:password@postgresql:5432/chinook?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    ports:
      - "9187:9187"
    volumes:
      - ./docker/postgres-exporter/queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    networks:
      - sql-graph-network
    depends_on:
      postgresql:
        condition: service_healthy
    profiles:
      - .monitoring  # Only start with --profile .monitoring

volumes:
  postgres_data:
    driver: local
    name: sql-graph-visualizer-postgres-data
  neo4j_data:
    driver: local
    name: sql-graph-visualizer-neo4j-data
  neo4j_logs:
    driver: local
    name: sql-graph-visualizer-neo4j-logs
  neo4j_import:
    driver: local
    name: sql-graph-visualizer-neo4j-import
  neo4j_plugins:
    driver: local
    name: sql-graph-visualizer-neo4j-plugins
  pgadmin_data:
    driver: local
    name: sql-graph-visualizer-pgadmin-data

networks:
  sql-graph-network:
    driver: bridge
    name: sql-graph-visualizer-network
