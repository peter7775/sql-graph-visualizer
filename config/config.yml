database:
  type: "postgresql"
  postgresql:
    host: "localhost"
    port: 5432
    user: "postgres"
    password: "password"
    database: "chinook"
    schema: "public"
    
    ssl:
      mode: "disable"
    
    application_name: "sql-graph-visualizer"
    statement_timeout: 30
    
    connection_mode: existing
    
    data_filtering:
      schema_discovery: true
      table_whitelist: ["album", "artist", "customer", "employee", "genre", "track", "playlist", "invoice", "invoiceline"]
      table_blacklist: []
      row_limit_per_table: 0
      query_timeout: 30
    
    security:
      read_only: true
      connection_timeout: 30
      query_timeout: 30
      max_connections: 10
      allow_production_connections: false
      allowed_hosts: ["localhost", "127.0.0.1"]

neo4j:
  uri: "bolt://127.0.0.1:7687"
  user: "neo4j"
  password: "testpass"

# Performance .monitoring and benchmarking configuration
performance:
  # Performance data collection settings
  monitoring:
    enabled: true
    update_interval: "5s"
    data_retention: "1h"
    max_concurrent_queries: 10
    
    # MySQL Performance Schema settings
    performance_schema:
      enabled: true
      statement_limit: 100
      table_io_limit: 50
      index_limit: 50
      connection_limit: 25
      cache_duration: "30s"
      
    # Performance analysis settings
    analysis:
      bottleneck_threshold: 70.0
      slow_query_threshold: 200.0  # milliseconds
      high_load_threshold: 80.0
      hotspot_threshold: 75.0
      
  # Real-time .monitoring via WebSocket
  realtime:
    enabled: true
    update_interval: "5s"
    heartbeat_interval: "30s"
    max_connections: 100
    write_timeout: "10s"
    read_timeout: "60s"
    ping_timeout: "90s"
    max_message_size: 512
    compression_enabled: true
    
    # Alert thresholds
    alerts:
      high_latency: 1000.0        # 1 second
      high_error_rate: 5.0        # 5%
      high_cpu_usage: 80.0        # 80%
      high_memory_usage: 85.0     # 85%
      slow_query_threshold: 200.0 # 200ms
      deadlock_threshold: 5       # 5 deadlocks per minute
      
  # Benchmarking settings
  benchmarks:
    enabled: true
    default_duration: "60s"
    max_duration: "600s"
    results_retention: "24h"
    cleanup_interval: "15m"
    
    # Sysbench configuration
    sysbench:
      executable_path: "sysbench"
      temp_dir: "/tmp/sysbench"
      cleanup_after_test: true
      
      # Default test parameters
      defaults:
        table_size: 10000
        threads: 4
        time: 60
        report_interval: 10
        
    # Resource limits
    limits:
      max_concurrent_benchmarks: 3
      memory_limit_mb: 100
      cpu_threshold: 80.0
      
  # Graph visualization settings
  visualization:
    # Visual encoding
    edge_thickness:
      metric: "query_frequency"
      scale: "linear"
      min_thickness: 1.0
      max_thickness: 10.0
      multiplier: 1.0
      
    edge_color:
      metric: "avg_execution_time"
      color_scale: "green_yellow_red"
      thresholds:
        fast: "< 100ms"
        medium: "100ms - 1s"
        slow: "> 1s"
        
    node_size:
      metric: "total_queries_involved"
      min_size: 20.0
      max_size: 100.0
      scale: "sqrt"
      
    node_color:
      metric: "avg_response_time"
      color_scale: "green_yellow_red"
      thresholds:
        good: "< 50ms"
        ok: "50ms - 200ms"
        slow: "> 200ms"
        
    # Animation settings
    animation:
      show_data_flow: true
      speed_based_on: "query_frequency"
      animation_speed: 1.0
      particle_count: 10
      
    # Update settings
    update_interval: "5s"
    history_retention: "1h"
    max_concurrent_updates: 3

transform_rules:
  - name: "users_to_nodes"
    rule_type: "node"
    source:
      type: "query"
      value: "SELECT u.*, CONCAT(u.full_name, ' (', u.role, ')') as display_name FROM users u WHERE u.is_active = 1"
    target_type: "User"
    field_mappings:
      id: "id"
      username: "username"
      email: "email"
      full_name: "full_name"
      role: "role"
      display_name: "name"
      is_active: "is_active"

  - name: "teams_to_nodes"
    rule_type: "node"
    source:
      type: "query"
      value: "SELECT t.*, u.full_name as lead_name FROM teams t LEFT JOIN users u ON t.team_lead_id = u.id"
    target_type: "Team"
    field_mappings:
      id: "id"
      name: "name"
      description: "description"
      team_lead_id: "team_lead_id"
      lead_name: "lead_name"

  - name: "skills_to_nodes"
    rule_type: "node"
    source:
      type: "query"
      value: "SELECT s.*, CONCAT(s.name, ' (', s.category, ')') as display_name FROM skills s"
    target_type: "Skill"
    field_mappings:
      id: "id"
      name: "display_name"
      category: "category"
      level_required: "level_required"

  - name: "projects_to_nodes"
    rule_type: "node"
    source:
      type: "query"
      value: "SELECT p.*, u.full_name as creator_name, t.name as team_name FROM projects p LEFT JOIN users u ON p.created_by = u.id LEFT JOIN teams t ON p.team_id = t.id"
    target_type: "Project"
    field_mappings:
      id: "id"
      name: "name"
      description: "description"
      status: "status"
      priority: "priority"
      budget: "budget"
      creator_name: "creator_name"
      team_name: "team_name"

  - name: "tasks_to_nodes"
    rule_type: "node"
    source:
      type: "query"
      value: "SELECT t.*, p.name as project_name, u1.full_name as assigned_to_name, u2.full_name as created_by_name, pt.title as parent_title FROM tasks t LEFT JOIN projects p ON t.project_id = p.id LEFT JOIN users u1 ON t.assigned_to = u1.id LEFT JOIN users u2 ON t.created_by = u2.id LEFT JOIN tasks pt ON t.parent_task_id = pt.id"
    target_type: "Task"
    field_mappings:
      id: "id"
      title: "name"
      description: "description"
      status: "status"
      priority: "priority"
      estimated_hours: "estimated_hours"
      actual_hours: "actual_hours"
      project_name: "project_name"
      assigned_to_name: "assigned_to_name"
      created_by_name: "created_by_name"
      parent_title: "parent_title"

  - name: "high_impact_projects"
    rule_type: "node"
    source:
      type: "query"
      value: "SELECT CONCAT('IMPACT_', p.id) as id, p.name, p.status, p.priority, p.budget, COUNT(t.id) as task_count, AVG(ps.importance = 'critical') as critical_skills_ratio FROM projects p LEFT JOIN tasks t ON p.id = t.project_id LEFT JOIN project_skills ps ON p.id = ps.project_id WHERE p.budget > 150000 OR p.priority IN ('high', 'critical') GROUP BY p.id, p.name, p.status, p.priority, p.budget HAVING task_count > 2"
    target_type: "HighImpactProject"
    field_mappings:
      id: "id"
      name: "name"
      status: "status"
      priority: "priority"
      budget: "budget"
      task_count: "task_count"
      critical_skills_ratio: "critical_skills_ratio"

  - name: "skill_experts"
    rule_type: "node"
    source:
      type: "query"
      value: "SELECT CONCAT('EXPERT_', us.user_id, '_', us.skill_id) as id, u.full_name as expert_name, s.name as skill_name, us.proficiency, us.years_experience FROM user_skills us JOIN users u ON us.user_id = u.id JOIN skills s ON us.skill_id = s.id WHERE us.proficiency IN ('advanced', 'expert') AND us.years_experience >= 4"
    target_type: "SkillExpert"
    field_mappings:
      id: "id"
      expert_name: "expert_name"
      skill_name: "skill_name"
      proficiency: "proficiency"
      years_experience: "years_experience"
      name: "expert_name"

  - name: "project_teams_summary"
    rule_type: "node"
    source:
      type: "query"
      value: "SELECT CONCAT('TEAM_SUMMARY_', t.id) as id, t.name as team_name, COUNT(DISTINCT p.id) as project_count, COUNT(DISTINCT tm.user_id) as member_count, AVG(p.budget) as avg_project_budget FROM teams t LEFT JOIN projects p ON t.id = p.team_id LEFT JOIN team_members tm ON t.id = tm.team_id GROUP BY t.id, t.name HAVING project_count > 0"
    target_type: "TeamSummary"
    field_mappings:
      id: "id"
      team_name: "name"
      project_count: "project_count"
      member_count: "member_count"
      avg_project_budget: "avg_project_budget"

  - name: "team_leadership"
    rule_type: "relationship"
    relationship_type: "LEADS"
    direction: "outgoing"
    source_node:
      type: "User"
      key: "id"
      target_field: "id"
    target_node:
      type: "Team"
      key: "team_lead_id"
      target_field: "id"
    field_mappings:
      id: "id"

  - name: "team_membership"
    rule_type: "relationship"
    relationship_type: "MEMBER_OF"
    direction: "outgoing"
    source:
      type: "query"
      value: "SELECT tm.user_id, tm.team_id, tm.role, tm.joined_at FROM team_members tm"
    source_node:
      type: "User"
      key: "user_id"
      target_field: "id"
    target_node:
      type: "Team"
      key: "team_id"
      target_field: "id"
    properties:
      role: "role"
      joined_at: "joined_at"

  - name: "user_skill_proficiency"
    rule_type: "relationship"
    relationship_type: "HAS_SKILL"
    direction: "outgoing"
    source:
      type: "query"
      value: "SELECT us.user_id, us.skill_id, us.proficiency, us.years_experience FROM user_skills us"
    source_node:
      type: "User"
      key: "user_id"
      target_field: "id"
    target_node:
      type: "Skill"
      key: "skill_id"
      target_field: "id"
    properties:
      proficiency: "proficiency"
      years_experience: "years_experience"

  - name: "project_creation"
    rule_type: "relationship"
    relationship_type: "CREATED"
    direction: "outgoing"
    source_node:
      type: "User"
      key: "created_by"
      target_field: "id"
    target_node:
      type: "Project"
      key: "id"
      target_field: "id"
    field_mappings:
      id: "id"

  - name: "project_team_assignment"
    rule_type: "relationship"
    relationship_type: "ASSIGNED_TO"
    direction: "outgoing"
    source_node:
      type: "Project"
      key: "id"
      target_field: "id"
    target_node:
      type: "Team"
      key: "team_id"
      target_field: "id"
    field_mappings:
      id: "id"

  - name: "task_assignment"
    rule_type: "relationship"
    relationship_type: "ASSIGNED_TO"
    direction: "outgoing"
    source_node:
      type: "Task"
      key: "id"
      target_field: "id"
    target_node:
      type: "User"
      key: "assigned_to"
      target_field: "id"
    field_mappings:
      id: "id"

  - name: "task_project_relationship"
    rule_type: "relationship"
    relationship_type: "BELONGS_TO"
    direction: "outgoing"
    source_node:
      type: "Task"
      key: "id"
      target_field: "id"
    target_node:
      type: "Project"
      key: "project_id"
      target_field: "id"
    field_mappings:
      id: "id"

  - name: "skill_compatibility"
    rule_type: "relationship"
    relationship_type: "SKILL_COMPATIBLE"
    direction: "both"
    source:
      type: "query"
      value: "SELECT u1.id as user1_id, u2.id as user2_id, COUNT(DISTINCT us1.skill_id) as common_skills FROM users u1 JOIN user_skills us1 ON u1.id = us1.user_id JOIN user_skills us2 ON us1.skill_id = us2.skill_id JOIN users u2 ON us2.user_id = u2.id WHERE u1.id < u2.id GROUP BY u1.id, u2.id HAVING common_skills >= 2"
    source_node:
      type: "User"
      key: "user1_id"
      target_field: "id"
    target_node:
      type: "User"
      key: "user2_id"
      target_field: "id"
    properties:
      common_skills: "common_skills"

  - name: "project_skill_requirements"
    rule_type: "relationship"
    relationship_type: "REQUIRES_SKILL"
    direction: "outgoing"
    source:
      type: "query"
      value: "SELECT ps.project_id, ps.skill_id, ps.importance FROM project_skills ps"
    source_node:
      type: "Project"
      key: "project_id"
      target_field: "id"
    target_node:
      type: "Skill"
      key: "skill_id"
      target_field: "id"
    properties:
      importance: "importance"

  - name: "task_dependencies"
    rule_type: "relationship"
    relationship_type: "DEPENDS_ON"
    direction: "outgoing"
    source:
      type: "query"
      value: "SELECT td.dependent_task_id, td.prerequisite_task_id, td.dependency_type FROM task_dependencies td"
    source_node:
      type: "Task"
      key: "dependent_task_id"
      target_field: "id"
    target_node:
      type: "Task"
      key: "prerequisite_task_id"
      target_field: "id"
    properties:
      dependency_type: "dependency_type"

  - name: "task_hierarchy"
    rule_type: "relationship"
    relationship_type: "SUBTASK_OF"
    direction: "outgoing"
    source:
      type: "query"
      value: "SELECT t.id as child_id, t.parent_task_id FROM tasks t WHERE t.parent_task_id IS NOT NULL"
    source_node:
      type: "Task"
      key: "child_id"
      target_field: "id"
    target_node:
      type: "Task"
      key: "parent_task_id"
      target_field: "id"
    field_mappings:
      child_id: "id"

  - name: "expert_skill_mastery"
    rule_type: "relationship"
    relationship_type: "EXPERT_IN"
    direction: "outgoing"
    source:
      type: "query"
      value: "SELECT CONCAT('EXPERT_', us.user_id, '_', us.skill_id) as expert_id, us.skill_id FROM user_skills us WHERE us.proficiency IN ('advanced', 'expert') AND us.years_experience >= 4"
    source_node:
      type: "SkillExpert"
      key: "expert_id"
      target_field: "id"
    target_node:
      type: "Skill"
      key: "skill_id"
      target_field: "id"
    field_mappings:
      expert_id: "id"

  # - name: "high_impact_project_connection"
  #   rule_type: "relationship"
  #   relationship_type: "ENHANCED_VIEW_OF"
  #   direction: "outgoing"
  #   source:
  #     type: "query"
  #     value: "SELECT CONCAT('IMPACT_', p.id) as impact_id, p.id as project_id FROM projects p WHERE p.budget > 150000 OR p.priority IN ('high', 'critical')"
  #   source_node:
  #     type: "HighImpactProject"
  #     key: "impact_id"
  #     target_field: "id"
  #   target_node:
  #     type: "Project"
  #     key: "project_id"
  #     target_field: "id"
  #   field_mappings:
  #     impact_id: "id"

  - name: "team_summary_connection"
    rule_type: "relationship"
    relationship_type: "SUMMARIZES"
    direction: "outgoing"
    source:
      type: "query"
      value: "SELECT CONCAT('TEAM_SUMMARY_', t.id) as summary_id, t.id as team_id FROM teams t"
    source_node:
      type: "TeamSummary"
      key: "summary_id"
      target_field: "id"
    target_node:
      type: "Team"
      key: "team_id"
      target_field: "id"
    field_mappings:
      summary_id: "id"
